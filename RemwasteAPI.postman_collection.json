{
	"info": {
		"_postman_id": "4dbd634f-3a51-460d-ae64-bc14a7612efa",
		"name": "RemwasteAPI",
		"description": "Posts API\n\nContact Support:\n Name: Jsonplaceholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14861577",
		"_collection_link": "https://crimson-shadow-203374.postman.co/workspace/My-Workspace~6363e5ae-75ab-44b4-855b-c5c0d0e674c2/collection/14861577-4dbd634f-3a51-460d-ae64-bc14a7612efa?action=share&source=collection_link&creator=14861577"
	},
	"item": [
		{
			"name": "jsonPlaceholders",
			"item": [
				{
					"name": "Create post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function (){\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"})\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//Confirm Message\r",
									"pm.test(\"userId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"});\r",
									"// Negative: Ensure status code is NOT 400 or 500\r",
									"pm.test(\"Status code is not 400 or 500\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([400, 500]);\r",
									"});\r",
									"\r",
									"// Negative: Ensure response does NOT include an unexpected error message\r",
									"pm.test(\"Response does not include unexpected error\", function () {\r",
									"    pm.expect(pm.response.text().toLowerCase()).to.not.include(\"error\");\r",
									"});\r",
									"\r",
									"// Negative: Check that response does NOT include invalid userId\r",
									"pm.test(\"Response does not contain invalid userId\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"-1\");\r",
									"});\r",
									"\r",
									"// Negative: Validate that response body is not empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text().length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": 10,\n  \"id\": 102,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://jsonplaceholder.typicode.com/posts",
							"protocol": "http",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						},
						"description": "Create new post"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}"
						}
					]
				},
				{
					"name": "Get post by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"})\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.property('userId');\r",
									"  pm.expect(responseData).to.have.property('id');\r",
									"  pm.expect(responseData).to.have.property('title');\r",
									"  pm.expect(responseData).to.have.property('body');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"UserId is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.userId).to.be.a('number');\r",
									"  pm.expect(responseData.userId).to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.body).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Body should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Negative: Status code should not be 400 or 500\r",
									"pm.test(\"Status code is not 4xx or 5xx\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.within(400, 599);\r",
									"});\r",
									"\r",
									"// Negative: Response should not be empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text().length).to.be.above(0, \"Expected response body to not be empty\");\r",
									"});\r",
									"\r",
									"// Negative: Title should not be null or undefined\r",
									"pm.test(\"Title is not null or undefined\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.title).to.not.be.oneOf([null, undefined]);\r",
									"});\r",
									"\r",
									"// Negative: Body should not be just whitespace\r",
									"pm.test(\"Body should not be just whitespace\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    const bodyTrimmed = responseData.body.trim();\r",
									"    pm.expect(bodyTrimmed).to.have.lengthOf.above(0, \"Body contains only whitespace\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "http://jsonplaceholder.typicode.com/posts/:id",
							"protocol": "http",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "get post details by id"
								}
							]
						},
						"description": "Get post details by id"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/posts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}"
						}
					]
				},
				{
					"name": "Delete post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"})\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"// Negative Test: Status code is NOT 4xx or 5xx\r",
									"pm.test(\"Status code is not a client or server error\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.within(400, 599);\r",
									"});\r",
									"\r",
									"// Negative Test: Status code is not 404 (Not Found)\r",
									"pm.test(\"Status code is not 404\", function () {\r",
									"    pm.expect(pm.response.code).to.not.equal(404);\r",
									"});\r",
									"\r",
									"// Negative Test: Response should not be empty\r",
									"pm.test(\"Response body is not empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.equal('');\r",
									"});\r",
									"\r",
									"// Negative Test: Response time is not too slow (over 5000ms)\r",
									"pm.test(\"Response time is not greater than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://jsonplaceholder.typicode.com/posts/:id",
							"protocol": "http",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "100",
									"description": "Delete post by id"
								}
							]
						},
						"description": "Delete post by id"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/posts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"})\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//Confirm Message\r",
									"pm.test(\"userId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"1\",\n  \"userId\": \"1\",\n  \"title\": \"new post\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://jsonplaceholder.typicode.com/posts/:id",
							"protocol": "http",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1",
									"description": "Update post"
								}
							]
						},
						"description": "Update post"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}"
						}
					]
				},
				{
					"name": "Patch a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"status code is 200\", function (){\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"})\r",
									"//Check response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//Confirm Message\r",
									"pm.test(\"userId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://jsonplaceholder.typicode.com/posts/:id",
							"protocol": "http",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "Patch a post"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Get list of posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", function (){\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"})\r",
							"//Check response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//Confirm Message\r",
							"pm.test(\"userId\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"1\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://jsonplaceholder.typicode.com/posts",
					"protocol": "http",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				},
				"description": "Get all posts"
			},
			"response": [
				{
					"name": "Successfully fetched all posts from JSONPlaceholder",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  },\n  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n    \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  }\n]"
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}